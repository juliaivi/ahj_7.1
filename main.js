(()=>{"use strict";class t{constructor(t){this.server=t}addTicket(t,e){const s={name:t,description:e},o=new XMLHttpRequest;o.onload=()=>{o.status>=400?console.error(JSON.parse(o.response)):console.log(JSON.parse(o.response))},o.onerror=()=>{console.error(JSON.parse(o.response))},o.open("POST",`${this.server}?method=createTicket`),o.send(JSON.stringify(s))}editTicket(t,e,s){const o={id:t,name:e,description:s},n=new XMLHttpRequest;n.responseType="json",n.open("POST",`${this.server}?method=updateById&id=${t}`),n.send(JSON.stringify(o)),n.onload=()=>{n.status>=400?console.error(n.response):console.log(n.response)},n.onerror=()=>{console.error(n.response)}}allTickets(t){const e=new XMLHttpRequest;e.open("GET",`${this.server}?method=allTickets`),e.responseType="json",e.send(),e.onload=()=>{e.status>=400?console.error(e.response):t(e.response)},e.onerror=()=>{console.error(e.response)}}ticketDescription(t){const e=new XMLHttpRequest;e.open("GET",`${this.server}?method=ticketById&id=${t}`),e.onload=()=>{e.status>=400?console.error(e.response):console.log(e.response)},e.onerror=()=>{console.error(e.response)},e.send()}toggleStatus(t,e){const s={id:t,status:e},o=new XMLHttpRequest;o.responseType="json",o.open("POST",`${this.server}?method=updateById&id=${t}`),o.send(JSON.stringify(s)),o.onload=()=>{o.status>=400?console.error(o.response):console.log(o.response)},o.onerror=()=>{console.error(o.response)}}deleteTicket(t){const e=new XMLHttpRequest;e.open("DELETE",`${this.server}?method=deleteById&id=${t}`),e.send(),e.onload=()=>{e.status>=400?console.error(e.response):console.log(e.response)},e.onerror=()=>{console.error(e.response)}}}function e(t){const e=new Date(t),s=e.getHours();let o=e.getMinutes(),n=e.getDate(),i=e.getMonth()+1;return o=o<10?`0${o}`:o,n=n<10?`0${n}`:n,i=i<10?`0${i}`:i,`${n}.${i}.${e.getFullYear()} ${s}:${o}`}function s(t){const s=document.querySelector("tbody");s.replaceChildren();for(const o of t){const t=e(o.created);let n=!1;o.status&&(n="active");const i=`\n                <tr data-id="${o.id}">\n                    <td class="status">\n                      <div class="circle ${n}"></div>\n                    </td>\n                    <td class="name">\n                      <p class="name__title">${o.name}</p>\n                      <p class="name__text d__none">${o.description}</p>\n                    </td>\n                    <td class="creat__data">${t}</td>\n                    <td class="action__edit">\n        \n                      <button class="btn__edit">\n                        <img class="btn__img">\n                      </button>\n                      <button class="btn__delete">X</button>\n                    </td>\n                </tr>\n      `;s.insertAdjacentHTML("beforeend",i)}}(new class{constructor(){this.request=new t("http://localhost:3000"),this.root=document.querySelector(".roots"),this.addBtn=this.root.querySelector(".add__btn"),this.nameText=this.root.querySelector(".name__text"),this.popup=this.root.querySelector(".popup"),this.popupAll=this.root.querySelectorAll(".popup"),this.delete=this.root.querySelector(".delete"),this.input=this.popup.querySelector("input"),this.textarea=this.popup.querySelector("textarea"),this.form=this.popup.querySelector("form"),this.btnCancel=this.popup.querySelector(".btn__cancel"),this.tBody=this.root.querySelector("tbody"),this.trAll=null,this.dataId=null,this.status=!1}init(){this.request.allTickets((t=>{s(t),this.getAllTr()})),this.addBtn.addEventListener("click",(t=>this.addPopup(t))),this.btnCancel.addEventListener("click",(t=>this.closePopup(t))),this.delete.addEventListener("click",(t=>this.deletePopup(t))),this.form.addEventListener("submit",(t=>this.sendPopup(t)))}getAllTr(){this.trAll=this.tBody.querySelectorAll("tr"),this.trAll.forEach((t=>{t.addEventListener("click",(t=>this.onMouseDown(t)))}))}addPopup(){if(this.checkOpenWindow(this.delete),this.popup.classList.contains("d__none")){const t=this.popup.querySelector(".title__add");t.classList.contains("d__none")&&t.classList.remove("d__none");const e=this.popup.querySelector(".title__change");this.checkOpenWindow(e),this.popup.classList.remove("d__none")}else this.popup.classList.add("d__none")}closePopup(){this.input.value="",this.textarea.value="",this.popup.classList.add("d__none")}sendPopup(t){t.preventDefault();if(t.target.closest(".form__popup").querySelector(".title").classList.contains("d__none")){document.querySelector(`tr[data-id="${this.dataId}"]`)&&this.request.editTicket(this.dataId,this.input.value,this.textarea.value)}else this.request.addTicket(this.input.value,this.textarea.value);this.request.allTickets((t=>{s(t),this.getAllTr()})),this.dataId=null,this.closePopup(t)}onMouseDown(t){const e=t.target.closest("tr");this.dataId=e.getAttribute("data-id");const s=e.querySelector(".name__title").textContent,o=e.querySelector(".name__text").textContent;if(t.target.classList.contains("circle")&&(t.target.classList.toggle("active"),t.target.classList.contains("active")?this.status=!0:this.status=!1,this.request.toggleStatus(this.dataId,this.status)),t.target.classList.contains("btn__img")||t.target.classList.contains("btn__edit"))if(t.target.closest(".btn__edit"),this.checkOpenWindow(this.delete),this.popup.classList.contains("d__none")){const t=this.popup.querySelector(".title__add");this.checkOpenWindow(t);const e=this.popup.querySelector(".title__change");e.classList.contains("d__none")&&e.classList.remove("d__none"),this.input.value=s,this.textarea.value=o,this.popup.classList.remove("d__none")}else this.popup.classList.add("d__none");t.target.classList.contains("btn__delete")&&(this.checkOpenWindow(this.popup),this.delete.classList.contains("d__none")?this.delete.classList.remove("d__none"):this.delete.classList.add("d__none")),t.target.classList.contains("name__title")&&(this.nameText=t.target.closest(".name").querySelector(".name__text"),this.nameText&&this.nameText.classList.toggle("d__none"),this.request.ticketDescription(this.dataId))}deletePopup(t){t.target.classList.contains("btn__cancel")&&this.delete.classList.add("d__none"),t.target.classList.contains("btn__save")&&(this.request.deleteTicket(this.dataId),this.delete.classList.add("d__none")),setTimeout((()=>{this.request.allTickets((t=>{s(t),this.getAllTr()}))}),100)}checkOpenWindow(t){t.classList.contains("d__none")||t.classList.add("d__none")}}).init()})();